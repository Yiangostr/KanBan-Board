{"ast":null,"code":"var _jsxFileName = \"/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/shared/TicketContent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Divider, Grid, Select, MenuItem, TextField, FormControl, InputLabel } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TicketService from '../../service/ticket-service';\nimport { dateFormatter, inputValueSetter } from '../../utils';\nimport { getColumnById, getColumnsIdOfBoard, setTicketById, moveTicketBetweenColumns } from '../../reducer/base-reducer';\nimport { useTicketContentStyle } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TicketContent({\n  isEditing,\n  ticket,\n  showTitle,\n  columnId\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const columnsById = useSelector(getColumnById);\n  const columnsOfBoard = useSelector(getColumnsIdOfBoard);\n  const classes = useTicketContentStyle();\n  const [description, setDescription] = useState(ticket.description);\n\n  const saveOnBlur = () => {\n    const updateTicket = { ...ticket\n    };\n    updateTicket.description = description;\n    TicketService.updateTicket(updateTicket);\n  };\n\n  const onColumnChange = event => {\n    const newColumnId = event.target.value;\n    dispatch(moveTicketBetweenColumns({\n      currentIndex: columnsById[columnId].ticketIds.indexOf(ticket.id),\n      newIndex: columnsById[newColumnId].ticketIds.length,\n      currentColumn: columnId,\n      newColumn: newColumnId\n    }));\n    const sourceLastIndex = columnsById[columnId].ticketIds.length;\n    const destinationLastIndex = columnsById[newColumnId].ticketIds.length;\n\n    (async () => {\n      await TicketService.moveTicket(ticket.id, columnId, sourceLastIndex, columnsById[columnId].ticketIds.indexOf(ticket.id));\n      await TicketService.moveTicket(ticket.id, newColumnId, columnsById[newColumnId].ticketIds.length, destinationLastIndex);\n    })();\n  };\n\n  const onValueChange = (key, value) => {\n    dispatch(setTicketById({\n      id: ticket.id,\n      data: { ...ticket,\n        [key]: value,\n        updatedAt: Date.now()\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          fullWidth: true,\n          variant: \"outlined\",\n          label: \"Column\",\n          value: columnId,\n          onChange: onColumnChange,\n          children: columnsOfBoard.map(colId => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: colId,\n            children: columnsById[colId].title\n          }, colId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-name\",\n        label: \"Title\",\n        variant: \"outlined\",\n        fullWidth: true,\n        value: ticket.title,\n        onBlur: () => saveOnBlur(),\n        onChange: event => {\n          onValueChange('title', event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"outlined-name\",\n        label: \"Description\",\n        variant: \"outlined\",\n        multiline: true,\n        rows: 4,\n        value: description,\n        onChange: inputValueSetter(setDescription),\n        onBlur: event => {\n          onValueChange('description', event.target.value);\n          saveOnBlur();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [showTitle && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Title: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.title,\n          children: ticket.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Column Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.title,\n        children: columnsById[columnId].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Description: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.title,\n        children: ticket.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Divider, {\n      className: classes.divider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        children: \"Created At:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: dateFormatter(ticket.createdAt)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        children: \"Updated At:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: dateFormatter(ticket.updatedAt)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TicketContent, \"5hMQUsSKAwvFZdazFBA4bljH7L8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useTicketContentStyle];\n});\n\n_c = TicketContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicketContent\");","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/shared/TicketContent.tsx"],"names":["React","useState","Typography","Divider","Grid","Select","MenuItem","TextField","FormControl","InputLabel","useDispatch","useSelector","TicketService","dateFormatter","inputValueSetter","getColumnById","getColumnsIdOfBoard","setTicketById","moveTicketBetweenColumns","useTicketContentStyle","TicketContent","isEditing","ticket","showTitle","columnId","dispatch","columnsById","columnsOfBoard","classes","description","setDescription","saveOnBlur","updateTicket","onColumnChange","event","newColumnId","target","value","currentIndex","ticketIds","indexOf","id","newIndex","length","currentColumn","newColumn","sourceLastIndex","destinationLastIndex","moveTicket","onValueChange","key","data","updatedAt","Date","now","map","colId","title","divider","createdAt"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Divider, Grid, Select, MenuItem, TextField, FormControl, InputLabel } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport TicketService from '../../service/ticket-service';\nimport { Tickets } from '../../models/Tickets';\nimport { dateFormatter, inputValueSetter } from '../../utils';\nimport {\n  getColumnById,\n  getColumnsIdOfBoard,\n  setTicketById,\n  moveTicketBetweenColumns,\n} from '../../reducer/base-reducer';\nimport { useTicketContentStyle } from './styles';\n\ninterface Props {\n  isEditing: boolean;\n  ticket: Tickets;\n  showTitle?: boolean;\n  columnId: string;\n}\n\nexport default function TicketContent({ isEditing, ticket, showTitle, columnId }: Props) {\n  const dispatch = useDispatch();\n  const columnsById = useSelector(getColumnById);\n  const columnsOfBoard = useSelector(getColumnsIdOfBoard);\n  const classes = useTicketContentStyle();\n\n  const [description, setDescription] = useState(ticket.description);\n\n  const saveOnBlur = () => {\n    const updateTicket = { ...ticket };\n    updateTicket.description = description;\n    TicketService.updateTicket(updateTicket);\n  };\n\n  const onColumnChange = (event: React.ChangeEvent<any>) => {\n    const newColumnId = (event.target as HTMLInputElement).value;\n    dispatch(\n      moveTicketBetweenColumns({\n        currentIndex: columnsById[columnId].ticketIds.indexOf(ticket.id),\n        newIndex: columnsById[newColumnId].ticketIds.length,\n        currentColumn: columnId,\n        newColumn: newColumnId,\n      }),\n    );\n    const sourceLastIndex = columnsById[columnId].ticketIds.length;\n    const destinationLastIndex = columnsById[newColumnId].ticketIds.length;\n    (async () => {\n      await TicketService.moveTicket(\n        ticket.id,\n        columnId,\n        sourceLastIndex,\n        columnsById[columnId].ticketIds.indexOf(ticket.id),\n      );\n      await TicketService.moveTicket(\n        ticket.id,\n        newColumnId,\n        columnsById[newColumnId].ticketIds.length,\n        destinationLastIndex,\n      );\n    })();\n  };\n\n  const onValueChange = (key: string, value: string) => {\n    dispatch(\n      setTicketById({\n        id: ticket.id,\n        data: { ...ticket, [key]: value, updatedAt: Date.now() },\n      }),\n    );\n  };\n\n  return (\n    <>\n      {isEditing ? (\n        <>\n          <FormControl fullWidth>\n            <InputLabel>Column</InputLabel>\n            <Select fullWidth variant=\"outlined\" label=\"Column\" value={columnId} onChange={onColumnChange}>\n              {columnsOfBoard.map((colId) => (\n                <MenuItem value={colId} key={colId}>\n                  {columnsById[colId].title}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <TextField\n            id=\"outlined-name\"\n            label=\"Title\"\n            variant=\"outlined\"\n            fullWidth\n            value={ticket.title}\n            onBlur={() => saveOnBlur()}\n            onChange={(event) => {\n              onValueChange('title', event.target.value);\n            }}\n          />\n          <TextField\n            fullWidth\n            id=\"outlined-name\"\n            label=\"Description\"\n            variant=\"outlined\"\n            multiline\n            rows={4}\n            value={description}\n            onChange={inputValueSetter(setDescription)}\n            onBlur={(event) => {\n              onValueChange('description', event.target.value);\n              saveOnBlur();\n            }}\n          />\n        </>\n      ) : (\n        <>\n          {showTitle && (\n            <>\n              <Typography variant=\"h6\">Title: </Typography>\n              <Typography className={classes.title}>{ticket.title}</Typography>\n            </>\n          )}\n\n          <Typography variant=\"h6\">Column Name: </Typography>\n          <Typography className={classes.title}>{columnsById[columnId].title}</Typography>\n\n          <Typography variant=\"h6\">Description: </Typography>\n          <Typography className={classes.title}>{ticket.description}</Typography>\n        </>\n      )}\n\n      <Divider className={classes.divider} />\n      <Grid container>\n        <Grid item xs={2}>\n          Created At:\n        </Grid>\n        <Grid item xs={4}>\n          {dateFormatter(ticket.createdAt)}\n        </Grid>\n        <Grid item xs={2}>\n          Updated At:\n        </Grid>\n        <Grid item xs={4}>\n          {dateFormatter(ticket.updatedAt)}\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
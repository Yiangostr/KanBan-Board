{"ast":null,"code":"import { gql } from '@apollo/client/core';\nimport gqlService from './gqlService';\nimport to from '../utils/to';\nexport default class ColumnService {}\nColumnService.GET_COLUMN_BY_BOARD = gql`\n    query getAllBoards($boardId: String) {\n      columns(boardId: $boardId) {\n        columns {\n          id\n          title\n          positionIndex\n        }\n        sequence {\n          id\n          position\n        }\n      }\n    }\n  `;\nColumnService.ADD_COLUMN = gql`\n    mutation createColumn($id: String, $title: String, $boardId: String, $position: Int) {\n      createColumn(id: $id, title: $title, boardId: $boardId, position: $position) {\n        id\n        title\n      }\n    }\n  `;\nColumnService.REMOVE_COLUMN = gql`\n    mutation deleteColumn($id: String) {\n      deleteColumn(id: $id) {\n        count\n      }\n    }\n  `;\nColumnService.UPDATE_COLUMN = gql`\n    mutation updateColumn($id: String, $title: String) {\n      updateColumn(id: $id, data: { title: $title }) {\n        title\n      }\n    }\n  `;\nColumnService.MOVE_COLUMN = gql`\n    mutation moveColumn($columnId: String, $boardId: String, $newPosition: Int, $currentPosition: Int) {\n      moveColumn(columnId: $columnId, boardId: $boardId, newPosition: $newPosition, currentPosition: $currentPosition) {\n        success\n      }\n    }\n  `;\n\nColumnService.createColumn = async (newColumn, boardId, position) => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: ColumnService.ADD_COLUMN,\n    variables: { ...newColumn,\n      boardId,\n      position\n    }\n  }));\n\n  if (err) {\n    return null;\n  }\n\n  return data.data;\n};\n\nColumnService.deleteColumn = async id => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: ColumnService.REMOVE_COLUMN,\n    variables: {\n      id\n    }\n  }));\n\n  if (err) {\n    return null;\n  }\n\n  return data.data;\n};\n\nColumnService.getColumns = async boardId => {\n  const [err, data] = await to(gqlService.query({\n    query: ColumnService.GET_COLUMN_BY_BOARD,\n    variables: {\n      boardId\n    }\n  }));\n\n  if (err) {\n    return [];\n  }\n\n  return data.data.columns;\n};\n\nColumnService.moveColumn = async (columnId, boardId, newPosition, currentPosition) => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: ColumnService.MOVE_COLUMN,\n    variables: {\n      columnId,\n      boardId,\n      newPosition,\n      currentPosition\n    }\n  }));\n\n  if (err) {\n    return null;\n  }\n\n  return data.data;\n};\n\nColumnService.updateColumn = async newColumn => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: ColumnService.UPDATE_COLUMN,\n    variables: newColumn\n  }));\n\n  if (err) {\n    return null;\n  }\n\n  return data.data;\n};","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/service/column-service.ts"],"names":["gql","gqlService","to","ColumnService","GET_COLUMN_BY_BOARD","ADD_COLUMN","REMOVE_COLUMN","UPDATE_COLUMN","MOVE_COLUMN","createColumn","newColumn","boardId","position","err","data","mutate","mutation","variables","deleteColumn","id","getColumns","query","columns","moveColumn","columnId","newPosition","currentPosition","updateColumn"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client/core';\nimport gqlService from './gqlService';\nimport to from '../utils/to';\nimport { Column } from '../models/Column';\n\nexport default class ColumnService {\n  static GET_COLUMN_BY_BOARD = gql`\n    query getAllBoards($boardId: String) {\n      columns(boardId: $boardId) {\n        columns {\n          id\n          title\n          positionIndex\n        }\n        sequence {\n          id\n          position\n        }\n      }\n    }\n  `;\n\n  static ADD_COLUMN = gql`\n    mutation createColumn($id: String, $title: String, $boardId: String, $position: Int) {\n      createColumn(id: $id, title: $title, boardId: $boardId, position: $position) {\n        id\n        title\n      }\n    }\n  `;\n\n  static REMOVE_COLUMN = gql`\n    mutation deleteColumn($id: String) {\n      deleteColumn(id: $id) {\n        count\n      }\n    }\n  `;\n\n  static UPDATE_COLUMN = gql`\n    mutation updateColumn($id: String, $title: String) {\n      updateColumn(id: $id, data: { title: $title }) {\n        title\n      }\n    }\n  `;\n\n  static MOVE_COLUMN = gql`\n    mutation moveColumn($columnId: String, $boardId: String, $newPosition: Int, $currentPosition: Int) {\n      moveColumn(columnId: $columnId, boardId: $boardId, newPosition: $newPosition, currentPosition: $currentPosition) {\n        success\n      }\n    }\n  `;\n\n  static createColumn = async (newColumn: Column, boardId: String, position: number) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: ColumnService.ADD_COLUMN,\n        variables: { ...newColumn, boardId, position },\n      }),\n    );\n    if (err) {\n      return null;\n    }\n    return data.data;\n  };\n\n  static deleteColumn = async (id: string) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: ColumnService.REMOVE_COLUMN,\n        variables: { id },\n      }),\n    );\n    if (err) {\n      return null;\n    }\n    return data.data;\n  };\n\n  static getColumns = async (boardId: string) => {\n    const [err, data] = await to(\n      gqlService.query({\n        query: ColumnService.GET_COLUMN_BY_BOARD,\n        variables: { boardId },\n      }),\n    );\n    if (err) {\n      return [];\n    }\n    return data.data.columns;\n  };\n\n  static moveColumn = async (columnId: string, boardId: string, newPosition: number, currentPosition: number) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: ColumnService.MOVE_COLUMN,\n        variables: { columnId, boardId, newPosition, currentPosition },\n      }),\n    );\n    if (err) {\n      return null;\n    }\n    return data.data;\n  };\n\n  static updateColumn = async (newColumn: Column) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: ColumnService.UPDATE_COLUMN,\n        variables: newColumn,\n      }),\n    );\n    if (err) {\n      return null;\n    }\n    return data.data;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
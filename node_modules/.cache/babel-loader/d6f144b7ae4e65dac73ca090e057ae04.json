{"ast":null,"code":"var _jsxFileName = \"/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/shared/PlaceholderAddNewButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Grid, TextField } from '@material-ui/core';\nimport { inputValueSetter } from '../../utils';\nimport { useBoardStyles } from '../BoardPage/styles';\nimport { usePlaceHolderAddNewButtonStyles } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PlaceholderAddNewButton(props) {\n  _s();\n\n  const [isEditing, setEditing] = useState(false);\n  const [value, setValue] = useState('');\n  const classNames = useBoardStyles();\n  const componentClassName = usePlaceHolderAddNewButtonStyles();\n\n  const onOK = () => {\n    if (value !== '') {\n      props.onAdd && props.onAdd(value);\n      setEditing(false);\n      setValue('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: componentClassName.container,\n    children: isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        autoFocus: true,\n        value: value,\n        fullWidth: true,\n        onChange: inputValueSetter(setValue)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        spacing: 1,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            className: classNames.newStatusLane,\n            onClick: onOK,\n            variant: \"outlined\",\n            children: \"OK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            className: classNames.newStatusLane,\n            onClick: () => setEditing(false),\n            variant: \"outlined\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n      className: classNames.newStatusLane,\n      onClick: () => setEditing(true),\n      fullWidth: true,\n      variant: \"outlined\",\n      children: props.buttonName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlaceholderAddNewButton, \"pYYoULU5aUb+tzcc8LeEG0wQwvc=\", false, function () {\n  return [useBoardStyles, usePlaceHolderAddNewButtonStyles];\n});\n\n_c = PlaceholderAddNewButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaceholderAddNewButton\");","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/shared/PlaceholderAddNewButton.tsx"],"names":["React","useState","Button","Grid","TextField","inputValueSetter","useBoardStyles","usePlaceHolderAddNewButtonStyles","PlaceholderAddNewButton","props","isEditing","setEditing","value","setValue","classNames","componentClassName","onOK","onAdd","container","newStatusLane","buttonName"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,QAAwC,mBAAxC;AAEA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,gCAAT,QAAiD,UAAjD;;;AAOA,eAAe,SAASC,uBAAT,CAAiCC,KAAjC,EAA+C;AAAA;;AAC5D,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMa,UAAU,GAAGR,cAAc,EAAjC;AACA,QAAMS,kBAAkB,GAAGR,gCAAgC,EAA3D;;AAEA,QAAMS,IAAI,GAAG,MAAM;AACjB,QAAIJ,KAAK,KAAK,EAAd,EAAkB;AAChBH,MAAAA,KAAK,CAACQ,KAAN,IAAeR,KAAK,CAACQ,KAAN,CAAYL,KAAZ,CAAf;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF,GAND;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAEE,kBAAkB,CAACG,SAAnC;AAAA,cACGR,SAAS,gBACR;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,SAAS,MAApB;AAAqB,QAAA,KAAK,EAAEE,KAA5B;AAAmC,QAAA,SAAS,MAA5C;AAA6C,QAAA,QAAQ,EAAEP,gBAAgB,CAACQ,QAAD;AAAvE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,SAAS,EAAC,KAA1B;AAAgC,QAAA,OAAO,EAAE,CAAzC;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,CAAf;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,SAAS,MAAjB;AAAkB,YAAA,SAAS,EAAEC,UAAU,CAACK,aAAxC;AAAuD,YAAA,OAAO,EAAEH,IAAhE;AAAsE,YAAA,OAAO,EAAC,UAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,CAAf;AAAA,iCACE,QAAC,MAAD;AACE,YAAA,SAAS,MADX;AAEE,YAAA,SAAS,EAAEF,UAAU,CAACK,aAFxB;AAGE,YAAA,OAAO,EAAE,MAAMR,UAAU,CAAC,KAAD,CAH3B;AAIE,YAAA,OAAO,EAAC,UAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBADQ,gBAsBR,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAEG,UAAU,CAACK,aAA9B;AAA6C,MAAA,OAAO,EAAE,MAAMR,UAAU,CAAC,IAAD,CAAtE;AAA8E,MAAA,SAAS,MAAvF;AAAwF,MAAA,OAAO,EAAC,UAAhG;AAAA,gBACGF,KAAK,CAACW;AADT;AAAA;AAAA;AAAA;AAAA;AAvBJ;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;;GA5CuBZ,uB;UAGHF,c,EACQC,gC;;;KAJLC,uB","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Grid, TextField } from '@material-ui/core';\n\nimport { inputValueSetter } from '../../utils';\nimport { useBoardStyles } from '../BoardPage/styles';\nimport { usePlaceHolderAddNewButtonStyles } from './styles';\n\ninterface Props {\n  buttonName: string;\n  onAdd: (value: string) => void;\n}\n\nexport default function PlaceholderAddNewButton(props: Props) {\n  const [isEditing, setEditing] = useState(false);\n  const [value, setValue] = useState('');\n  const classNames = useBoardStyles();\n  const componentClassName = usePlaceHolderAddNewButtonStyles();\n\n  const onOK = () => {\n    if (value !== '') {\n      props.onAdd && props.onAdd(value);\n      setEditing(false);\n      setValue('');\n    }\n  };\n\n  return (\n    <div className={componentClassName.container}>\n      {isEditing ? (\n        <>\n          <TextField autoFocus value={value} fullWidth onChange={inputValueSetter(setValue)} />\n          <Grid container direction=\"row\" spacing={1}>\n            <Grid item xs={6}>\n              <Button fullWidth className={classNames.newStatusLane} onClick={onOK} variant=\"outlined\">\n                OK\n              </Button>\n            </Grid>\n            <Grid item xs={6}>\n              <Button\n                fullWidth\n                className={classNames.newStatusLane}\n                onClick={() => setEditing(false)}\n                variant=\"outlined\"\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </>\n      ) : (\n        <Button className={classNames.newStatusLane} onClick={() => setEditing(true)} fullWidth variant=\"outlined\">\n          {props.buttonName}\n        </Button>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
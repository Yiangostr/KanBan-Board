{"ast":null,"code":"import moment from 'moment';\nconst DATE_FORMAT = 'DD-MM-YYYY HH:mm:ss A'; // easy and reusable setter function for component input boxes\n\nexport const inputValueSetter = setter => event => {\n  setter(event.target.value);\n}; // Data formatter\n\nexport const dateFormatter = timestamp => moment(timestamp).format(DATE_FORMAT); // move element an array,\n// real world example: move a ticket from one index to other\n\nexport const changeIndex = (array, currentIndex, newIndex) => {\n  const newArray = [...array];\n  const element = array[currentIndex]; // pull element\n\n  newArray.splice(currentIndex, 1); // put the new element\n\n  newArray.splice(newIndex, 0, element);\n  return newArray;\n}; // create object from the array of object by using the id as the key\n\nexport const toObjectById = array => {\n  return array.reduce((p, c) => {\n    p[c.id] = c;\n    return p;\n  }, {});\n}; // reusable logic to mapping the initial data loading.\n\nexport const initialDataLoader = ({\n  tickets,\n  sequence: [...ticketSequence]\n}, {\n  columns,\n  sequence: [...columnSequence]\n}) => {\n  // sort by positions\n  ticketSequence.sort((a, b) => a.position - b.position);\n  columnSequence.sort((a, b) => a.position - b.position);\n\n  const getTicketByColumnId = id => ticketSequence.filter(ts => ts.parentId === id);\n\n  return {\n    ticketsById: toObjectById(tickets),\n    columnsById: columns.reduce((p, c) => {\n      p[c.id] = { ...c,\n        ticketIds: getTicketByColumnId(c.id).map(t => t.id)\n      };\n      return p;\n    }, {}),\n    colSequence: columnSequence.map(s => s.id)\n  };\n};","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/utils/index.ts"],"names":["moment","DATE_FORMAT","inputValueSetter","setter","event","target","value","dateFormatter","timestamp","format","changeIndex","array","currentIndex","newIndex","newArray","element","splice","toObjectById","reduce","p","c","id","initialDataLoader","tickets","sequence","ticketSequence","columns","columnSequence","sort","a","b","position","getTicketByColumnId","filter","ts","parentId","ticketsById","columnsById","ticketIds","map","t","colSequence","s"],"mappings":"AACA,OAAOA,MAAP,MAAmB,QAAnB;AAIA,MAAMC,WAAW,GAAG,uBAApB,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAuBC,KAAD,IAAgD;AACpGD,EAAAA,MAAM,CAAEC,KAAK,CAACC,MAAP,CAAmCC,KAApC,CAAN;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMC,aAAa,GAAIC,SAAD,IAAuBR,MAAM,CAACQ,SAAD,CAAN,CAAkBC,MAAlB,CAAyBR,WAAzB,CAA7C,C,CAEP;AACA;;AACA,OAAO,MAAMS,WAAW,GAAG,CAACC,KAAD,EAAeC,YAAf,EAAqCC,QAArC,KAAiE;AAC1F,QAAMC,QAAQ,GAAG,CAAC,GAAGH,KAAJ,CAAjB;AACA,QAAMI,OAAO,GAAGJ,KAAK,CAACC,YAAD,CAArB,CAF0F,CAI1F;;AACAE,EAAAA,QAAQ,CAACE,MAAT,CAAgBJ,YAAhB,EAA8B,CAA9B,EAL0F,CAM1F;;AACAE,EAAAA,QAAQ,CAACE,MAAT,CAAgBH,QAAhB,EAA0B,CAA1B,EAA6BE,OAA7B;AACA,SAAOD,QAAP;AACD,CATM,C,CAWP;;AACA,OAAO,MAAMG,YAAY,GAAIN,KAAD,IAAuB;AACjD,SAAOA,KAAK,CAACO,MAAN,CAAa,CAACC,CAAD,EAASC,CAAT,KAAoB;AACtCD,IAAAA,CAAC,CAACC,CAAC,CAACC,EAAH,CAAD,GAAUD,CAAV;AACA,WAAOD,CAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMG,iBAAiB,GAAG,CAC/B;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAQ,EAAE,CAAC,GAAGC,cAAJ;AAArB,CAD+B,EAE/B;AAAEC,EAAAA,OAAF;AAAWF,EAAAA,QAAQ,EAAE,CAAC,GAAGG,cAAJ;AAArB,CAF+B,KAG5B;AACH;AACAF,EAAAA,cAAc,CAACG,IAAf,CAAoB,CAACC,CAAD,EAASC,CAAT,KAAoBD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAvD;AACAJ,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAACC,CAAD,EAASC,CAAT,KAAoBD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAvD;;AAEA,QAAMC,mBAAmB,GAAIX,EAAD,IAAgBI,cAAc,CAACQ,MAAf,CAAuBC,EAAD,IAAaA,EAAE,CAACC,QAAH,KAAgBd,EAAnD,CAA5C;;AAEA,SAAO;AACLe,IAAAA,WAAW,EAAEnB,YAAY,CAACM,OAAD,CADpB;AAELc,IAAAA,WAAW,EAAEX,OAAO,CAACR,MAAR,CAAe,CAACC,CAAD,EAASC,CAAT,KAAuB;AACjDD,MAAAA,CAAC,CAACC,CAAC,CAACC,EAAH,CAAD,GAAU,EACR,GAAGD,CADK;AAERkB,QAAAA,SAAS,EAAEN,mBAAmB,CAACZ,CAAC,CAACC,EAAH,CAAnB,CAA0BkB,GAA1B,CAA+BC,CAAD,IAAgBA,CAAC,CAACnB,EAAhD;AAFH,OAAV;AAIA,aAAOF,CAAP;AACD,KANY,EAMV,EANU,CAFR;AASLsB,IAAAA,WAAW,EAAEd,cAAc,CAACY,GAAf,CAAoBG,CAAD,IAAYA,CAAC,CAACrB,EAAjC;AATR,GAAP;AAWD,CArBM","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport { Tickets } from '../models/Tickets';\nimport { Column } from '../models/Column';\n\nconst DATE_FORMAT = 'DD-MM-YYYY HH:mm:ss A';\n\n// easy and reusable setter function for component input boxes\nexport const inputValueSetter = (setter: Function) => (event: React.ChangeEvent<HTMLInputElement>) => {\n  setter((event.target as HTMLInputElement).value);\n};\n\n// Data formatter\nexport const dateFormatter = (timestamp: number) => moment(timestamp).format(DATE_FORMAT);\n\n// move element an array,\n// real world example: move a ticket from one index to other\nexport const changeIndex = (array: any[], currentIndex: number, newIndex: number): any[] => {\n  const newArray = [...array];\n  const element = array[currentIndex];\n\n  // pull element\n  newArray.splice(currentIndex, 1);\n  // put the new element\n  newArray.splice(newIndex, 0, element);\n  return newArray;\n};\n\n// create object from the array of object by using the id as the key\nexport const toObjectById = (array: any[]): any => {\n  return array.reduce((p: any, c: any) => {\n    p[c.id] = c;\n    return p;\n  }, {});\n};\n\n// reusable logic to mapping the initial data loading.\nexport const initialDataLoader = (\n  { tickets, sequence: [...ticketSequence] }: any,\n  { columns, sequence: [...columnSequence] }: any,\n) => {\n  // sort by positions\n  ticketSequence.sort((a: any, b: any) => a.position - b.position);\n  columnSequence.sort((a: any, b: any) => a.position - b.position);\n\n  const getTicketByColumnId = (id: string) => ticketSequence.filter((ts: any) => ts.parentId === id);\n\n  return {\n    ticketsById: toObjectById(tickets),\n    columnsById: columns.reduce((p: any, c: Column) => {\n      p[c.id] = {\n        ...c,\n        ticketIds: getTicketByColumnId(c.id).map((t: Tickets) => t.id),\n      };\n      return p;\n    }, {}),\n    colSequence: columnSequence.map((s: any) => s.id),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
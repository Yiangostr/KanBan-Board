{"ast":null,"code":"var _jsxFileName = \"/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/BoardPage/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useDispatch } from 'react-redux';\nimport { Grid } from '@material-ui/core';\nimport Kanban from './Kanban';\nimport Menubar from './Menubar';\nimport to from '../../utils/to';\nimport BoardService from '../../service/board-service';\nimport ColumnService from '../../service/column-service';\nimport TicketService from '../../service/ticket-service';\nimport { useParams } from 'react-router-dom';\nimport { useDashboardStyles } from './styles';\nimport { initialDataLoader } from '../../utils';\nimport { setAllColumnsById, setSelectedBoard, setColumnIdsOfSelectedBoard, setAllTicketsById } from '../../reducer/base-reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BoardPage = () => {\n  _s();\n\n  const dashBoardStyle = useDashboardStyles();\n  const params = useParams();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    (async () => {\n      const [boardError, board] = await to(BoardService.getBoardByAlias(params.alias));\n      const [columnError, colData] = await to(ColumnService.getColumns(board.id));\n      const [ticketsError, ticketData] = await to(TicketService.getTickets(board.id));\n\n      if (boardError || columnError || ticketsError) {\n        return alert('Loading Failed. Please Reload.');\n      }\n\n      const {\n        ticketsById,\n        columnsById,\n        colSequence\n      } = initialDataLoader(ticketData, colData);\n      dispatch(setSelectedBoard(board));\n      dispatch(setAllTicketsById(ticketsById));\n      dispatch(setAllColumnsById(columnsById));\n      dispatch(setColumnIdsOfSelectedBoard(colSequence));\n      setLoading(false);\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Menubar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: dashBoardStyle.content,\n      children: loading ? /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        className: dashBoardStyle.loader,\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Kanban, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(BoardPage, \"fBK+w+Aok39Jd3fROY49zOtTNZ4=\", false, function () {\n  return [useDashboardStyles, useParams, useDispatch];\n});\n\n_c = BoardPage;\nexport default BoardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardPage\");","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/BoardPage/index.tsx"],"names":["React","useEffect","useState","CircularProgress","useDispatch","Grid","Kanban","Menubar","to","BoardService","ColumnService","TicketService","useParams","useDashboardStyles","initialDataLoader","setAllColumnsById","setSelectedBoard","setColumnIdsOfSelectedBoard","setAllTicketsById","BoardPage","dashBoardStyle","params","dispatch","loading","setLoading","boardError","board","getBoardByAlias","alias","columnError","colData","getColumns","id","ticketsError","ticketData","getTickets","alert","ticketsById","columnsById","colSequence","content","loader"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useDispatch } from 'react-redux';\nimport { Grid } from '@material-ui/core';\n\nimport Kanban from './Kanban';\nimport Menubar from './Menubar';\nimport to from '../../utils/to';\nimport BoardService from '../../service/board-service';\nimport ColumnService from '../../service/column-service';\nimport TicketService from '../../service/ticket-service';\n\nimport { useParams } from 'react-router-dom';\nimport { useDashboardStyles } from './styles';\nimport { initialDataLoader } from '../../utils';\nimport {\n  setAllColumnsById,\n  setSelectedBoard,\n  setColumnIdsOfSelectedBoard,\n  setAllTicketsById,\n} from '../../reducer/base-reducer';\n\ninterface Params {\n  alias: string;\n}\n\nconst BoardPage = () => {\n  const dashBoardStyle = useDashboardStyles();\n\n  const params = useParams<Params>();\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      const [boardError, board] = await to(BoardService.getBoardByAlias(params.alias));\n      const [columnError, colData] = await to(ColumnService.getColumns(board.id));\n      const [ticketsError, ticketData] = await to(TicketService.getTickets(board.id));\n\n      if (boardError || columnError || ticketsError) {\n        return alert('Loading Failed. Please Reload.');\n      }\n\n      const { ticketsById, columnsById, colSequence } = initialDataLoader(ticketData, colData);\n\n      dispatch(setSelectedBoard(board));\n      dispatch(setAllTicketsById(ticketsById));\n      dispatch(setAllColumnsById(columnsById));\n      dispatch(setColumnIdsOfSelectedBoard(colSequence));\n      setLoading(false);\n    })();\n  }, []);\n\n  return (\n    <>\n      <Menubar />\n      <div className={dashBoardStyle.content}>\n        {loading ? (\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" className={dashBoardStyle.loader}>\n            <CircularProgress />\n          </Grid>\n        ) : (\n          <Kanban />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default BoardPage;\n"]},"metadata":{},"sourceType":"module"}
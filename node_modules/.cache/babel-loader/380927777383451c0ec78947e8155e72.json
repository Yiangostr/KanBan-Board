{"ast":null,"code":"function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n  const length = prev.length;\n\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func, equalityCheck = defaultEqualityCheck) {\n  let lastArgs = null;\n  let lastResult = null; // we reference arguments instead of spreading them for performance reasons\n\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  const dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(dep => typeof dep === 'function')) {\n    const dependencyTypes = dependencies.map(dep => typeof dep).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + `instead received the following types: [${dependencyTypes}]`);\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize, ...memoizeOptions) {\n  return (...funcs) => {\n    let recomputations = 0;\n    const resultFunc = funcs.pop();\n    const dependencies = getDependencies(funcs);\n    const memoizedResultFunc = memoize(function () {\n      recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }, ...memoizeOptions); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    const selector = memoize(function () {\n      const params = [];\n      const length = dependencies.length;\n\n      for (let i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      return memoizedResultFunc.apply(null, params);\n    });\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n\n    selector.recomputations = () => recomputations;\n\n    selector.resetRecomputations = () => recomputations = 0;\n\n    return selector;\n  };\n}\nexport const createSelector = createSelectorCreator(defaultMemoize);\nexport function createStructuredSelector(selectors, selectorCreator = createSelector) {\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + `where each property is a selector, instead received a ${typeof selectors}`);\n  }\n\n  const objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(key => selectors[key]), (...values) => {\n    return values.reduce((composition, value, index) => {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/node_modules/reselect/src/index.js"],"names":["defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","length","i","defaultMemoize","func","lastArgs","lastResult","arguments","apply","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","memoizeOptions","recomputations","resultFunc","pop","memoizedResultFunc","selector","params","push","resetRecomputations","createSelector","createStructuredSelector","selectors","selectorCreator","objectKeys","Object","keys","key","values","reduce","composition","value","index"],"mappings":"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","sourcesContent":["function defaultEqualityCheck(a, b) {\n  return a === b\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  const length = prev.length\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function defaultMemoize(func, equalityCheck = defaultEqualityCheck) {\n  let lastArgs = null\n  let lastResult = null\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments)\n    }\n\n    lastArgs = arguments\n    return lastResult\n  }\n}\n\nfunction getDependencies(funcs) {\n  const dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs\n\n  if (!dependencies.every(dep => typeof dep === 'function')) {\n    const dependencyTypes = dependencies.map(\n      dep => typeof dep\n    ).join(', ')\n    throw new Error(\n      'Selector creators expect all input-selectors to be functions, ' +\n      `instead received the following types: [${dependencyTypes}]`\n    )\n  }\n\n  return dependencies\n}\n\nexport function createSelectorCreator(memoize, ...memoizeOptions) {\n  return (...funcs) => {\n    let recomputations = 0\n    const resultFunc = funcs.pop()\n    const dependencies = getDependencies(funcs)\n\n    const memoizedResultFunc = memoize(\n      function () {\n        recomputations++\n        // apply arguments instead of spreading for performance.\n        return resultFunc.apply(null, arguments)\n      },\n      ...memoizeOptions\n    )\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    const selector = memoize(function () {\n      const params = []\n      const length = dependencies.length\n\n      for (let i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments))\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params)\n    })\n\n    selector.resultFunc = resultFunc\n    selector.dependencies = dependencies\n    selector.recomputations = () => recomputations\n    selector.resetRecomputations = () => recomputations = 0\n    return selector\n  }\n}\n\nexport const createSelector = createSelectorCreator(defaultMemoize)\n\nexport function createStructuredSelector(selectors, selectorCreator = createSelector) {\n  if (typeof selectors !== 'object') {\n    throw new Error(\n      'createStructuredSelector expects first argument to be an object ' +\n      `where each property is a selector, instead received a ${typeof selectors}`\n    )\n  }\n  const objectKeys = Object.keys(selectors)\n  return selectorCreator(\n    objectKeys.map(key => selectors[key]),\n    (...values) => {\n      return values.reduce((composition, value, index) => {\n        composition[objectKeys[index]] = value\n        return composition\n      }, {})\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
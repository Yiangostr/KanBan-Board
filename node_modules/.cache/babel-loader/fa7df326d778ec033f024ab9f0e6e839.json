{"ast":null,"code":"var _jsxFileName = \"/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/BoardPage/Kanban.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ColumnContainer from './ColumnComponent/ColumnContainer';\nimport PlaceholderAddNewButton from '../shared/PlaceholderAddNewButton';\nimport ColumnService from '../../service/column-service';\nimport TicketService from '../../service/ticket-service';\nimport { useBoardStyles } from './styles';\nimport { columnFactory } from '../../models/factory';\nimport { getColumnById, getColumnsIdOfBoard, changeColumnIndex, changeTicketIndex, moveTicketBetweenColumns, addColumn, getSelectedBoard } from '../../reducer/base-reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Project() {\n  _s();\n\n  const columnById = useSelector(getColumnById);\n  const columnIdsOfBoard = useSelector(getColumnsIdOfBoard);\n  const selectedBoard = useSelector(getSelectedBoard);\n  const dispatcher = useDispatch();\n  const classNames = useBoardStyles();\n\n  const handleDragEnd = dropResult => {\n    const {\n      type,\n      source,\n      destination,\n      draggableId\n    } = dropResult;\n\n    if (!destination) {\n      return;\n    }\n\n    if (type === 'column') {\n      dispatcher(changeColumnIndex({\n        currentIndex: source.index,\n        newIndex: destination.index\n      }));\n      ColumnService.moveColumn(draggableId, selectedBoard.id, destination.index, source.index);\n    } else {\n      if (source.droppableId === destination.droppableId) {\n        // ticket movement on the same column\n        dispatcher(changeTicketIndex({\n          columnId: destination.droppableId,\n          currentIndex: source.index,\n          newIndex: destination.index\n        }));\n        TicketService.moveTicket(draggableId, destination.droppableId, destination.index, source.index);\n      } else {\n        // ticket movement between two columns\n        dispatcher(moveTicketBetweenColumns({\n          currentIndex: source.index,\n          newIndex: destination.index,\n          currentColumn: source.droppableId,\n          newColumn: destination.droppableId\n        }));\n        const sourceLastIndex = columnById[source.droppableId].ticketIds.length;\n        const destinationLastIndex = columnById[destination.droppableId].ticketIds.length;\n\n        (async () => {\n          await TicketService.moveTicket(draggableId, source.droppableId, sourceLastIndex, source.index);\n          await TicketService.moveTicket(draggableId, destination.droppableId, destination.index, destinationLastIndex);\n        })();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames.board,\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        type: \"column\",\n        droppableId: \"projectBoard\",\n        direction: \"horizontal\",\n        children: provided => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            className: classNames.lanes,\n            children: [columnIdsOfBoard.map((id, index) => {\n              const column = columnById[id];\n              return /*#__PURE__*/_jsxDEV(Draggable, {\n                draggableId: id,\n                index: index,\n                children: provided => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    className: classNames.laneContainer,\n                    children: /*#__PURE__*/_jsxDEV(ColumnContainer, {\n                      dragHandleProps: provided.dragHandleProps,\n                      column: column,\n                      columnId: id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 98,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 93,\n                    columnNumber: 27\n                  }, this);\n                }\n              }, id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this);\n            }), provided.placeholder, /*#__PURE__*/_jsxDEV(PlaceholderAddNewButton, {\n              buttonName: \"Add Column\",\n              onAdd: title => {\n                const column = columnFactory(title);\n                ColumnService.createColumn(column, selectedBoard.id, columnIdsOfBoard.length);\n                dispatcher(addColumn(column));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Project, \"rKGM3mjckaBBur5yNYYEtwVzR78=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useBoardStyles];\n});\n\n_c = Project;\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/BoardPage/Kanban.tsx"],"names":["React","DragDropContext","Droppable","Draggable","useDispatch","useSelector","ColumnContainer","PlaceholderAddNewButton","ColumnService","TicketService","useBoardStyles","columnFactory","getColumnById","getColumnsIdOfBoard","changeColumnIndex","changeTicketIndex","moveTicketBetweenColumns","addColumn","getSelectedBoard","Project","columnById","columnIdsOfBoard","selectedBoard","dispatcher","classNames","handleDragEnd","dropResult","type","source","destination","draggableId","currentIndex","index","newIndex","moveColumn","id","droppableId","columnId","moveTicket","currentColumn","newColumn","sourceLastIndex","ticketIds","length","destinationLastIndex","board","provided","innerRef","droppableProps","lanes","map","column","draggableProps","laneContainer","dragHandleProps","placeholder","title","createColumn"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport {\n  DragDropContext,\n  DropResult,\n  Droppable,\n  DroppableProvided,\n  Draggable,\n  DraggableProvided,\n} from 'react-beautiful-dnd';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ColumnContainer from './ColumnComponent/ColumnContainer';\nimport PlaceholderAddNewButton from '../shared/PlaceholderAddNewButton';\nimport ColumnService from '../../service/column-service';\nimport TicketService from '../../service/ticket-service';\n\nimport { useBoardStyles } from './styles';\nimport { columnFactory } from '../../models/factory';\nimport { ColumnById } from '../../reducer/types';\nimport {\n  getColumnById,\n  getColumnsIdOfBoard,\n  changeColumnIndex,\n  changeTicketIndex,\n  moveTicketBetweenColumns,\n  addColumn,\n  getSelectedBoard,\n} from '../../reducer/base-reducer';\n\nexport default function Project() {\n  const columnById = useSelector(getColumnById);\n  const columnIdsOfBoard = useSelector(getColumnsIdOfBoard);\n  const selectedBoard = useSelector(getSelectedBoard);\n\n  const dispatcher = useDispatch();\n\n  const classNames = useBoardStyles();\n\n  const handleDragEnd = (dropResult: DropResult) => {\n    const { type, source, destination, draggableId } = dropResult;\n    if (!destination) {\n      return;\n    }\n    if (type === 'column') {\n      dispatcher(changeColumnIndex({ currentIndex: source.index, newIndex: destination.index }));\n      ColumnService.moveColumn(draggableId, selectedBoard.id, destination.index, source.index);\n    } else {\n      if (source.droppableId === destination.droppableId) {\n        // ticket movement on the same column\n        dispatcher(\n          changeTicketIndex({\n            columnId: destination.droppableId,\n            currentIndex: source.index,\n            newIndex: destination.index,\n          }),\n        );\n        TicketService.moveTicket(draggableId, destination.droppableId, destination.index, source.index);\n      } else {\n        // ticket movement between two columns\n        dispatcher(\n          moveTicketBetweenColumns({\n            currentIndex: source.index,\n            newIndex: destination.index,\n            currentColumn: source.droppableId,\n            newColumn: destination.droppableId,\n          }),\n        );\n        const sourceLastIndex = columnById[source.droppableId].ticketIds.length;\n        const destinationLastIndex = columnById[destination.droppableId].ticketIds.length;\n        (async () => {\n          await TicketService.moveTicket(draggableId, source.droppableId, sourceLastIndex, source.index);\n          await TicketService.moveTicket(draggableId, destination.droppableId, destination.index, destinationLastIndex);\n        })();\n      }\n    }\n  };\n\n  return (\n    <div className={classNames.board}>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Droppable type=\"column\" droppableId=\"projectBoard\" direction=\"horizontal\">\n          {(provided: DroppableProvided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps} className={classNames.lanes}>\n                {columnIdsOfBoard.map((id, index) => {\n                  const column: ColumnById = columnById[id];\n\n                  return (\n                    <Draggable key={id} draggableId={id} index={index}>\n                      {(provided: DraggableProvided) => {\n                        return (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            className={classNames.laneContainer}\n                          >\n                            <ColumnContainer dragHandleProps={provided.dragHandleProps} column={column} columnId={id} />\n                          </div>\n                        );\n                      }}\n                    </Draggable>\n                  );\n                })}\n\n                {provided.placeholder}\n\n                <PlaceholderAddNewButton\n                  buttonName=\"Add Column\"\n                  onAdd={(title) => {\n                    const column = columnFactory(title);\n                    ColumnService.createColumn(column, selectedBoard.id, columnIdsOfBoard.length);\n                    dispatcher(addColumn(column));\n                  }}\n                />\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
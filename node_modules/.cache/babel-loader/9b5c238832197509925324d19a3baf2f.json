{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nimport { changeIndex } from '../utils';\nimport { createSelector } from 'reselect/src';\nimport produce from 'immer';\nexport const mainSlice = createSlice({\n  name: 'main',\n  initialState: {\n    allBoards: [],\n    columnsOfSelectedBoard: [],\n    ticketById: {},\n    columnById: {},\n    selectedBoard: {},\n    ui: {}\n  },\n  reducers: {\n    setAllBoards: (state, {\n      payload\n    }) => ({ ...state,\n      allBoards: payload\n    }),\n    clearStore: state => produce(state, ds => {\n      ds.columnsOfSelectedBoard = [];\n      ds.ticketById = {};\n      ds.columnById = {};\n      ds.selectedBoard = {};\n      ds.ui = {};\n    }),\n    addBoard: (state, {\n      payload\n    }) => produce(state, draftState => {\n      draftState.allBoards = [...draftState.allBoards, payload];\n    }),\n    setSelectedBoard: (state, {\n      payload\n    }) => produce(state, ds => {\n      ds.selectedBoard = payload;\n    }),\n    setAllColumnsById: (state, {\n      payload\n    }) => produce(state, ds => {\n      ds.columnById = payload;\n    }),\n    setAllTicketsById: (state, {\n      payload\n    }) => produce(state, ds => {\n      ds.ticketById = payload;\n    }),\n    setColumnIdsOfSelectedBoard: (state, {\n      payload\n    }) => produce(state, ds => {\n      ds.columnsOfSelectedBoard = payload;\n    }),\n    setColumnById: (state, {\n      payload: {\n        id,\n        data\n      }\n    }) => produce(state, df => {\n      df.columnById[id] = data;\n    }),\n    setTicketById: (state, {\n      payload: {\n        id,\n        data\n      }\n    }) => produce(state, df => {\n      df.ticketById[id] = data;\n    }),\n    changeColumnIndex: (state, {\n      payload: {\n        currentIndex,\n        newIndex\n      }\n    }) => produce(state, draftState => {\n      draftState.columnsOfSelectedBoard = changeIndex(state.columnsOfSelectedBoard, currentIndex, newIndex);\n    }),\n    changeTicketIndex: (state, {\n      payload: {\n        currentIndex,\n        newIndex,\n        columnId\n      }\n    }) => produce(state, draftState => {\n      draftState.columnById[columnId].ticketIds = changeIndex(draftState.columnById[columnId].ticketIds, currentIndex, newIndex);\n    }),\n    moveTicketBetweenColumns: (state, {\n      payload: {\n        currentIndex,\n        newIndex,\n        currentColumn,\n        newColumn\n      }\n    }) => produce(state, draftState => {\n      const ticket = draftState.columnById[currentColumn].ticketIds[currentIndex];\n      draftState.columnById[currentColumn].ticketIds.splice(currentIndex, 1); // remove\n\n      draftState.columnById[newColumn].ticketIds.splice(newIndex, 0, ticket); // add\n    }),\n    addColumn: (state, {\n      payload: {\n        title,\n        id\n      }\n    }) => produce(state, draftState => {\n      const newColumn = {\n        ticketIds: [],\n        title\n      };\n      draftState.columnsOfSelectedBoard.push(id);\n      draftState.columnById[id] = newColumn;\n    }),\n    deleteColumn: (state, {\n      payload: {\n        colId\n      }\n    }) => produce(state, ds => {\n      const tickets = ds.columnById[colId].ticketIds;\n      tickets.forEach(ticketId => {\n        delete ds.ticketById[ticketId];\n      });\n      delete ds.columnById[colId];\n      const index = ds.columnsOfSelectedBoard.indexOf(colId);\n      ds.columnsOfSelectedBoard.splice(index, 1);\n    }),\n    deleteTicket: (state, {\n      payload: {\n        ticketId,\n        columnId\n      }\n    }) => produce(state, ds => {\n      delete ds.ticketById[ticketId];\n      const index = ds.columnById[columnId].ticketIds.indexOf(ticketId);\n      ds.columnById[columnId].ticketIds.splice(index, 1);\n    }),\n    addTicket: (state, {\n      payload: {\n        ticket,\n        columnId\n      }\n    }) => produce(state, draftState => {\n      draftState.ticketById[ticket.id] = ticket;\n      draftState.columnById[columnId].ticketIds.push(ticket.id);\n    }),\n    setUI: (state, {\n      payload\n    }) => produce(state, draftState => {\n      draftState.ui = { ...draftState.ui,\n        ...payload\n      };\n    })\n  }\n});\nexport const {\n  setAllBoards,\n  setSelectedBoard,\n  addColumn,\n  addTicket,\n  changeColumnIndex,\n  changeTicketIndex,\n  setColumnIdsOfSelectedBoard,\n  setAllColumnsById,\n  setAllTicketsById,\n  setColumnById,\n  setTicketById,\n  moveTicketBetweenColumns,\n  setUI,\n  deleteColumn,\n  deleteTicket,\n  addBoard,\n  clearStore\n} = mainSlice.actions;\nexport const main = store => store.main;\nexport const getAllBoards = createSelector(main, store => store.allBoards || []);\nexport const getColumnById = createSelector(main, store => store.columnById);\nexport const getSelectedBoard = createSelector(main, store => store.selectedBoard);\nexport const getTicketById = createSelector(main, store => store.ticketById);\nexport const getColumnsIdOfBoard = createSelector(main, store => store.columnsOfSelectedBoard);\nexport const getUI = createSelector(main, store => store.ui) || {};\nconst reducer = {\n  main: mainSlice.reducer\n};\nexport default configureStore({\n  reducer\n});","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/reducer/base-reducer.ts"],"names":["configureStore","createSlice","changeIndex","createSelector","produce","mainSlice","name","initialState","allBoards","columnsOfSelectedBoard","ticketById","columnById","selectedBoard","ui","reducers","setAllBoards","state","payload","clearStore","ds","addBoard","draftState","setSelectedBoard","setAllColumnsById","setAllTicketsById","setColumnIdsOfSelectedBoard","setColumnById","id","data","df","setTicketById","changeColumnIndex","currentIndex","newIndex","changeTicketIndex","columnId","ticketIds","moveTicketBetweenColumns","currentColumn","newColumn","ticket","splice","addColumn","title","push","deleteColumn","colId","tickets","forEach","ticketId","index","indexOf","deleteTicket","addTicket","setUI","actions","main","store","getAllBoards","getColumnById","getSelectedBoard","getTicketById","getColumnsIdOfBoard","getUI","reducer"],"mappings":"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","sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\nimport { ColumnById, ProjectData } from './types';\nimport { changeIndex } from '../utils';\nimport { createSelector } from 'reselect/src';\nimport produce from 'immer';\n\nexport const mainSlice = createSlice({\n  name: 'main',\n  initialState: {\n    allBoards: [],\n    columnsOfSelectedBoard: [],\n    ticketById: {},\n    columnById: {},\n    selectedBoard: {},\n    ui: {},\n  },\n  reducers: {\n    setAllBoards: (state, { payload }) => ({ ...state, allBoards: payload }),\n\n    clearStore: (state) =>\n      produce(state, (ds) => {\n        ds.columnsOfSelectedBoard = [];\n        ds.ticketById = {};\n        ds.columnById = {};\n        ds.selectedBoard = {};\n        ds.ui = {};\n      }),\n\n    addBoard: (state, { payload }) =>\n      produce(state, (draftState: ProjectData) => {\n        draftState.allBoards = [...draftState.allBoards, payload];\n      }),\n\n    setSelectedBoard: (state, { payload }) =>\n      produce(state, (ds: ProjectData) => {\n        ds.selectedBoard = payload;\n      }),\n\n    setAllColumnsById: (state, { payload }) =>\n      produce(state, (ds: ProjectData) => {\n        ds.columnById = payload;\n      }),\n    setAllTicketsById: (state, { payload }) =>\n      produce(state, (ds: ProjectData) => {\n        ds.ticketById = payload;\n      }),\n    setColumnIdsOfSelectedBoard: (state, { payload }) =>\n      produce(state, (ds: ProjectData) => {\n        ds.columnsOfSelectedBoard = payload;\n      }),\n\n    setColumnById: (state, { payload: { id, data } }) =>\n      produce(state, (df: ProjectData) => {\n        df.columnById[id] = data;\n      }),\n    setTicketById: (state, { payload: { id, data } }) =>\n      produce(state, (df: ProjectData) => {\n        df.ticketById[id] = data;\n      }),\n\n    changeColumnIndex: (state, { payload: { currentIndex, newIndex } }) =>\n      produce(state, (draftState: ProjectData) => {\n        draftState.columnsOfSelectedBoard = changeIndex(state.columnsOfSelectedBoard, currentIndex, newIndex);\n      }),\n\n    changeTicketIndex: (state, { payload: { currentIndex, newIndex, columnId } }) =>\n      produce(state, (draftState: ProjectData) => {\n        draftState.columnById[columnId].ticketIds = changeIndex(\n          draftState.columnById[columnId].ticketIds,\n          currentIndex,\n          newIndex,\n        );\n      }),\n\n    moveTicketBetweenColumns: (state, { payload: { currentIndex, newIndex, currentColumn, newColumn } }) =>\n      produce(state, (draftState: ProjectData) => {\n        const ticket = draftState.columnById[currentColumn].ticketIds[currentIndex];\n        draftState.columnById[currentColumn].ticketIds.splice(currentIndex, 1); // remove\n        draftState.columnById[newColumn].ticketIds.splice(newIndex, 0, ticket); // add\n      }),\n\n    addColumn: (state, { payload: { title, id } }) =>\n      produce(state, (draftState: ProjectData) => {\n        const newColumn: ColumnById = {\n          ticketIds: [],\n          title,\n        };\n        draftState.columnsOfSelectedBoard.push(id);\n        draftState.columnById[id] = newColumn;\n      }),\n\n    deleteColumn: (state, { payload: { colId } }) =>\n      produce(state, (ds: ProjectData) => {\n        const tickets = ds.columnById[colId].ticketIds;\n        tickets.forEach((ticketId) => {\n          delete ds.ticketById[ticketId];\n        });\n        delete ds.columnById[colId];\n        const index = ds.columnsOfSelectedBoard.indexOf(colId);\n        ds.columnsOfSelectedBoard.splice(index, 1);\n      }),\n\n    deleteTicket: (state, { payload: { ticketId, columnId } }) =>\n      produce(state, (ds: ProjectData) => {\n        delete ds.ticketById[ticketId];\n        const index = ds.columnById[columnId].ticketIds.indexOf(ticketId);\n        ds.columnById[columnId].ticketIds.splice(index, 1);\n      }),\n\n    addTicket: (state, { payload: { ticket, columnId } }) =>\n      produce(state, (draftState: ProjectData) => {\n        draftState.ticketById[ticket.id] = ticket;\n        draftState.columnById[columnId].ticketIds.push(ticket.id);\n      }),\n\n    setUI: (state, { payload }) =>\n      produce(state, (draftState) => {\n        draftState.ui = { ...draftState.ui, ...payload };\n      }),\n  },\n});\n\nexport const {\n  setAllBoards,\n  setSelectedBoard,\n  addColumn,\n  addTicket,\n  changeColumnIndex,\n  changeTicketIndex,\n  setColumnIdsOfSelectedBoard,\n  setAllColumnsById,\n  setAllTicketsById,\n  setColumnById,\n  setTicketById,\n  moveTicketBetweenColumns,\n  setUI,\n  deleteColumn,\n  deleteTicket,\n  addBoard,\n  clearStore,\n} = mainSlice.actions;\n\nexport const main = (store: any) => store.main;\n\nexport const getAllBoards = createSelector(main, (store: ProjectData) => store.allBoards || []);\nexport const getColumnById = createSelector(main, (store: ProjectData) => store.columnById);\nexport const getSelectedBoard = createSelector(main, (store: ProjectData) => store.selectedBoard);\nexport const getTicketById = createSelector(main, (store: ProjectData) => store.ticketById);\nexport const getColumnsIdOfBoard = createSelector(main, (store: ProjectData) => store.columnsOfSelectedBoard);\nexport const getUI = createSelector(main, (store: ProjectData) => store.ui) || {};\n\nconst reducer = {\n  main: mainSlice.reducer,\n};\n\nexport default configureStore({\n  reducer,\n});\n"]},"metadata":{},"sourceType":"module"}
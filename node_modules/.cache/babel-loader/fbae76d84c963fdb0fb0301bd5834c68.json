{"ast":null,"code":"import { gql } from '@apollo/client/core';\nimport gqlService from './gqlService';\nimport to from '../utils/to';\nexport default class TicketService {}\nTicketService.GET_TICKETS_BY_BOARD = gql`\n    query getTickets($boardId: String) {\n      tickets(boardId: $boardId) {\n        tickets {\n          id\n          title\n          description\n          createdAt\n          updatedAt\n          positionIndex\n        }\n        sequence {\n          id\n          position\n          parentId\n        }\n      }\n    }\n  `;\nTicketService.ADD_TICKET = gql`\n    mutation createTicket($id: String, $title: String, $columnId: String, $position: Int, $createdAt: Float) {\n      createTicket(id: $id, title: $title, columnId: $columnId, position: $position, createdAt: $createdAt) {\n        columnId\n        createdAt\n        description\n        id\n        positionIndex\n        title\n        updatedAt\n      }\n    }\n  `;\nTicketService.MOVE_TICKET = gql`\n    mutation moveTicket($ticketId: String, $currentPosition: Int, $newColumn: String, $newPosition: Int) {\n      moveTicket(\n        ticketId: $ticketId\n        currentPosition: $currentPosition\n        newPosition: $newPosition\n        newColumn: $newColumn\n      ) {\n        success\n      }\n    }\n  `;\nTicketService.UPDATE_TICKET = gql`\n    mutation updateTicket($id: String, $title: String, $description: String, $updatedAt: Float) {\n      updateTicket(id: $id, data: { title: $title, updatedAt: $updatedAt, description: $description }) {\n        description\n        title\n        updatedAt\n      }\n    }\n  `;\nTicketService.REMOVE_TICKET = gql`\n    mutation removeTicket($id: String) {\n      deleteTicket(id: $id) {\n        count\n      }\n    }\n  `;\n\nTicketService.createTicket = async (newTicket, columnId, position) => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: TicketService.ADD_TICKET,\n    variables: { ...newTicket,\n      columnId,\n      position\n    }\n  }));\n\n  if (err) {\n    return null;\n  }\n\n  return data.data;\n};\n\nTicketService.getTickets = async boardId => {\n  const [err, data] = await to(gqlService.query({\n    query: TicketService.GET_TICKETS_BY_BOARD,\n    variables: {\n      boardId\n    }\n  }));\n\n  if (err) {\n    return [];\n  }\n\n  return data.data.tickets;\n};\n\nTicketService.moveTicket = async (ticketId, newColumn, newPosition, currentPosition) => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: TicketService.MOVE_TICKET,\n    variables: {\n      ticketId,\n      newColumn,\n      newPosition,\n      currentPosition\n    }\n  }));\n\n  if (err) {\n    return [];\n  }\n\n  return data.data;\n};\n\nTicketService.updateTicket = async newTicket => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: TicketService.UPDATE_TICKET,\n    variables: newTicket\n  }));\n\n  if (err) {\n    return [];\n  }\n\n  return data.data;\n};\n\nTicketService.removeTicket = async id => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: TicketService.REMOVE_TICKET,\n    variables: {\n      id\n    }\n  }));\n\n  if (err) {\n    return [];\n  }\n\n  return data.data;\n};","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/service/ticket-service.ts"],"names":["gql","gqlService","to","TicketService","GET_TICKETS_BY_BOARD","ADD_TICKET","MOVE_TICKET","UPDATE_TICKET","REMOVE_TICKET","createTicket","newTicket","columnId","position","err","data","mutate","mutation","variables","getTickets","boardId","query","tickets","moveTicket","ticketId","newColumn","newPosition","currentPosition","updateTicket","removeTicket","id"],"mappings":"AAAA,SAASA,GAAT,QAAoB,qBAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,EAAP,MAAe,aAAf;AAGA,eAAe,MAAMC,aAAN,CAAoB;AAAdA,a,CACZC,oB,GAAuBJ,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;AAnBqBG,a,CAqBZE,U,GAAaL,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;AAjCqBG,a,CAmCZG,W,GAAcN,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;AA9CqBG,a,CAgDZI,a,GAAgBP,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;AAxDqBG,a,CA0DZK,a,GAAgBR,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,G;;AAhEqBG,a,CAkEZM,Y,GAAe,OAAOC,SAAP,EAA2BC,QAA3B,EAA6CC,QAA7C,KAAkE;AACtF,QAAM,CAACC,GAAD,EAAMC,IAAN,IAAc,MAAMZ,EAAE,CAC1BD,UAAU,CAACc,MAAX,CAAkB;AAChBC,IAAAA,QAAQ,EAAEb,aAAa,CAACE,UADR;AAEhBY,IAAAA,SAAS,EAAE,EAAE,GAAGP,SAAL;AAAgBC,MAAAA,QAAhB;AAA0BC,MAAAA;AAA1B;AAFK,GAAlB,CAD0B,CAA5B;;AAMA,MAAIC,GAAJ,EAAS;AACP,WAAO,IAAP;AACD;;AACD,SAAOC,IAAI,CAACA,IAAZ;AACD,C;;AA7EkBX,a,CA+EZe,U,GAAa,MAAOC,OAAP,IAA2B;AAC7C,QAAM,CAACN,GAAD,EAAMC,IAAN,IAAc,MAAMZ,EAAE,CAC1BD,UAAU,CAACmB,KAAX,CAAiB;AACfA,IAAAA,KAAK,EAAEjB,aAAa,CAACC,oBADN;AAEfa,IAAAA,SAAS,EAAE;AAAEE,MAAAA;AAAF;AAFI,GAAjB,CAD0B,CAA5B;;AAMA,MAAIN,GAAJ,EAAS;AACP,WAAO,EAAP;AACD;;AACD,SAAOC,IAAI,CAACA,IAAL,CAAUO,OAAjB;AACD,C;;AA1FkBlB,a,CA4FZmB,U,GAAa,OAAOC,QAAP,EAAyBC,SAAzB,EAA4CC,WAA5C,EAAiEC,eAAjE,KAA6F;AAC/G,QAAM,CAACb,GAAD,EAAMC,IAAN,IAAc,MAAMZ,EAAE,CAC1BD,UAAU,CAACc,MAAX,CAAkB;AAChBC,IAAAA,QAAQ,EAAEb,aAAa,CAACG,WADR;AAEhBW,IAAAA,SAAS,EAAE;AAAEM,MAAAA,QAAF;AAAYC,MAAAA,SAAZ;AAAuBC,MAAAA,WAAvB;AAAoCC,MAAAA;AAApC;AAFK,GAAlB,CAD0B,CAA5B;;AAMA,MAAIb,GAAJ,EAAS;AACP,WAAO,EAAP;AACD;;AACD,SAAOC,IAAI,CAACA,IAAZ;AACD,C;;AAvGkBX,a,CAyGZwB,Y,GAAe,MAAOjB,SAAP,IAA8B;AAClD,QAAM,CAACG,GAAD,EAAMC,IAAN,IAAc,MAAMZ,EAAE,CAC1BD,UAAU,CAACc,MAAX,CAAkB;AAChBC,IAAAA,QAAQ,EAAEb,aAAa,CAACI,aADR;AAEhBU,IAAAA,SAAS,EAAEP;AAFK,GAAlB,CAD0B,CAA5B;;AAMA,MAAIG,GAAJ,EAAS;AACP,WAAO,EAAP;AACD;;AACD,SAAOC,IAAI,CAACA,IAAZ;AACD,C;;AApHkBX,a,CAsHZyB,Y,GAAe,MAAOC,EAAP,IAAsB;AAC1C,QAAM,CAAChB,GAAD,EAAMC,IAAN,IAAc,MAAMZ,EAAE,CAC1BD,UAAU,CAACc,MAAX,CAAkB;AAChBC,IAAAA,QAAQ,EAAEb,aAAa,CAACK,aADR;AAEhBS,IAAAA,SAAS,EAAE;AAAEY,MAAAA;AAAF;AAFK,GAAlB,CAD0B,CAA5B;;AAMA,MAAIhB,GAAJ,EAAS;AACP,WAAO,EAAP;AACD;;AACD,SAAOC,IAAI,CAACA,IAAZ;AACD,C","sourcesContent":["import { gql } from '@apollo/client/core';\nimport gqlService from './gqlService';\nimport to from '../utils/to';\nimport { Tickets } from '../models/Tickets';\n\nexport default class TicketService {\n  static GET_TICKETS_BY_BOARD = gql`\n    query getTickets($boardId: String) {\n      tickets(boardId: $boardId) {\n        tickets {\n          id\n          title\n          description\n          createdAt\n          updatedAt\n          positionIndex\n        }\n        sequence {\n          id\n          position\n          parentId\n        }\n      }\n    }\n  `;\n\n  static ADD_TICKET = gql`\n    mutation createTicket($id: String, $title: String, $columnId: String, $position: Int, $createdAt: Float) {\n      createTicket(id: $id, title: $title, columnId: $columnId, position: $position, createdAt: $createdAt) {\n        columnId\n        createdAt\n        description\n        id\n        positionIndex\n        title\n        updatedAt\n      }\n    }\n  `;\n\n  static MOVE_TICKET = gql`\n    mutation moveTicket($ticketId: String, $currentPosition: Int, $newColumn: String, $newPosition: Int) {\n      moveTicket(\n        ticketId: $ticketId\n        currentPosition: $currentPosition\n        newPosition: $newPosition\n        newColumn: $newColumn\n      ) {\n        success\n      }\n    }\n  `;\n\n  static UPDATE_TICKET = gql`\n    mutation updateTicket($id: String, $title: String, $description: String, $updatedAt: Float) {\n      updateTicket(id: $id, data: { title: $title, updatedAt: $updatedAt, description: $description }) {\n        description\n        title\n        updatedAt\n      }\n    }\n  `;\n\n  static REMOVE_TICKET = gql`\n    mutation removeTicket($id: String) {\n      deleteTicket(id: $id) {\n        count\n      }\n    }\n  `;\n\n  static createTicket = async (newTicket: Tickets, columnId: String, position: number) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: TicketService.ADD_TICKET,\n        variables: { ...newTicket, columnId, position },\n      }),\n    );\n    if (err) {\n      return null;\n    }\n    return data.data;\n  };\n\n  static getTickets = async (boardId: string) => {\n    const [err, data] = await to(\n      gqlService.query({\n        query: TicketService.GET_TICKETS_BY_BOARD,\n        variables: { boardId },\n      }),\n    );\n    if (err) {\n      return [];\n    }\n    return data.data.tickets;\n  };\n\n  static moveTicket = async (ticketId: string, newColumn: string, newPosition: number, currentPosition: number) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: TicketService.MOVE_TICKET,\n        variables: { ticketId, newColumn, newPosition, currentPosition },\n      }),\n    );\n    if (err) {\n      return [];\n    }\n    return data.data;\n  };\n\n  static updateTicket = async (newTicket: Tickets) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: TicketService.UPDATE_TICKET,\n        variables: newTicket,\n      }),\n    );\n    if (err) {\n      return [];\n    }\n    return data.data;\n  };\n\n  static removeTicket = async (id: string) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: TicketService.REMOVE_TICKET,\n        variables: { id },\n      }),\n    );\n    if (err) {\n      return [];\n    }\n    return data.data;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
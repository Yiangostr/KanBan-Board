{"ast":null,"code":"var _jsxFileName = \"/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/TicketPage/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Divider, FormControlLabel, Grid, Paper, Switch } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport TicketContent from '../shared/TicketContent';\nimport { useTicketPageStyle } from './styles';\nimport to from '../../utils/to';\nimport BoardService from '../../service/board-service';\nimport ColumnService from '../../service/column-service';\nimport TicketService from '../../service/ticket-service';\nimport { initialDataLoader } from '../../utils';\nimport { getColumnById, getTicketById, setAllColumnsById, setAllTicketsById, setColumnIdsOfSelectedBoard, setSelectedBoard } from '../../reducer/base-reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TicketPage() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    alias,\n    ticketId\n  } = useParams();\n  const [isLoading, setLoading] = useState(true);\n  const ticketsById = useSelector(getTicketById);\n  const columnsById = useSelector(getColumnById);\n  useEffect(() => {\n    (async () => {\n      const [boardError, board] = await to(BoardService.getBoardByAlias(alias));\n      const [columnError, colData] = await to(ColumnService.getColumns(board.id));\n      const [ticketsError, ticketData] = await to(TicketService.getTickets(board.id));\n\n      if (boardError || columnError || ticketsError) {\n        return alert('Loading Failed. Please Reload.');\n      }\n\n      const {\n        ticketsById,\n        columnsById,\n        colSequence\n      } = initialDataLoader(ticketData, colData);\n      dispatch(setSelectedBoard(board));\n      dispatch(setAllTicketsById(ticketsById));\n      dispatch(setAllColumnsById(columnsById));\n      dispatch(setColumnIdsOfSelectedBoard(colSequence));\n      setLoading(false);\n    })();\n  }, []);\n  const [isEditing, setEditing] = useState(false);\n  const styles = useTicketPageStyle();\n  const columnId = Object.keys(columnsById).filter(colId => {\n    return columnsById[colId].ticketIds.indexOf(ticketId) > -1;\n  })[0];\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    className: styles.container,\n    children: !isLoading && /*#__PURE__*/_jsxDEV(Paper, {\n      className: styles.paper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'flex-end'\n        },\n        children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          labelPlacement: \"start\",\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            name: \"checkedB\",\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 24\n          }, this),\n          value: isEditing,\n          onChange: (event, checked) => {\n            setEditing(checked);\n          },\n          label: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        className: styles.longerDivider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TicketContent, {\n        isEditing: isEditing,\n        ticket: ticketsById[ticketId],\n        columnId: columnId,\n        showTitle: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TicketPage, \"G/2LSQuUVuAQ0CaBdBlwTXOMbw4=\", false, function () {\n  return [useDispatch, useParams, useSelector, useSelector, useTicketPageStyle];\n});\n\n_c = TicketPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicketPage\");","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/components/TicketPage/index.tsx"],"names":["React","useEffect","useState","Divider","FormControlLabel","Grid","Paper","Switch","useDispatch","useSelector","useParams","TicketContent","useTicketPageStyle","to","BoardService","ColumnService","TicketService","initialDataLoader","getColumnById","getTicketById","setAllColumnsById","setAllTicketsById","setColumnIdsOfSelectedBoard","setSelectedBoard","TicketPage","dispatch","alias","ticketId","isLoading","setLoading","ticketsById","columnsById","boardError","board","getBoardByAlias","columnError","colData","getColumns","id","ticketsError","ticketData","getTickets","alert","colSequence","isEditing","setEditing","styles","columnId","Object","keys","filter","colId","ticketIds","indexOf","container","paper","display","justifyContent","event","checked","longerDivider"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Divider, FormControlLabel, Grid, Paper, Switch } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport TicketContent from '../shared/TicketContent';\nimport { useTicketPageStyle } from './styles';\nimport to from '../../utils/to';\nimport BoardService from '../../service/board-service';\nimport ColumnService from '../../service/column-service';\nimport TicketService from '../../service/ticket-service';\nimport { initialDataLoader } from '../../utils';\nimport {\n  getColumnById,\n  getTicketById,\n  setAllColumnsById,\n  setAllTicketsById,\n  setColumnIdsOfSelectedBoard,\n  setSelectedBoard,\n} from '../../reducer/base-reducer';\n\nexport default function TicketPage() {\n  const dispatch = useDispatch();\n  const { alias, ticketId } = useParams<any>();\n  const [isLoading, setLoading] = useState(true);\n\n  const ticketsById = useSelector(getTicketById);\n  const columnsById = useSelector(getColumnById);\n\n  useEffect(() => {\n    (async () => {\n      const [boardError, board] = await to(BoardService.getBoardByAlias(alias));\n      const [columnError, colData] = await to(ColumnService.getColumns(board.id));\n      const [ticketsError, ticketData] = await to(TicketService.getTickets(board.id));\n\n      if (boardError || columnError || ticketsError) {\n        return alert('Loading Failed. Please Reload.');\n      }\n\n      const { ticketsById, columnsById, colSequence } = initialDataLoader(ticketData, colData);\n\n      dispatch(setSelectedBoard(board));\n      dispatch(setAllTicketsById(ticketsById));\n      dispatch(setAllColumnsById(columnsById));\n      dispatch(setColumnIdsOfSelectedBoard(colSequence));\n      setLoading(false);\n    })();\n  }, []);\n  const [isEditing, setEditing] = useState(false);\n  const styles = useTicketPageStyle();\n\n  const columnId = Object.keys(columnsById).filter((colId) => {\n    return columnsById[colId].ticketIds.indexOf(ticketId) > -1;\n  })[0];\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" className={styles.container}>\n      {!isLoading && (\n        <Paper className={styles.paper}>\n          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n            <FormControlLabel\n              labelPlacement=\"start\"\n              control={<Switch name=\"checkedB\" color=\"primary\" />}\n              value={isEditing}\n              onChange={(event, checked) => {\n                setEditing(checked);\n              }}\n              label=\"Edit\"\n            />\n          </div>\n          <Divider className={styles.longerDivider} />\n          <TicketContent isEditing={isEditing} ticket={ticketsById[ticketId]} columnId={columnId} showTitle />\n        </Paper>\n      )}\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
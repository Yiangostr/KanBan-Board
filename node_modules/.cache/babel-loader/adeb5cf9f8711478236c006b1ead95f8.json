{"ast":null,"code":"import { gql } from '@apollo/client/core';\nimport gqlService from './gqlService';\nimport to from '../utils/to';\nexport default class BoardService {}\nBoardService.GET_ALL_BOARDS = gql`\n    query getAllBoards {\n      boards {\n        id\n        title\n        alias\n      }\n    }\n  `;\nBoardService.GET_BOARD_BY_ALIAS = gql`\n    query getAllBoards($alias: String) {\n      board(alias: $alias) {\n        id\n        title\n        alias\n      }\n    }\n  `;\nBoardService.ADD_BOARD = gql`\n    mutation createBoard($id: String, $title: String, $alias: String) {\n      createBoard(id: $id, title: $title, alias: $alias) {\n        id\n        title\n        alias\n      }\n    }\n  `;\nBoardService.UPDATE_BOARD_TITLE = gql`\n    mutation updateBoard($id: String, $title: String) {\n      updateBoard(id: $id, data: { title: $title }) {\n        alias\n        id\n        title\n      }\n    }\n  `;\n\nBoardService.createBoard = async newBoard => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: BoardService.ADD_BOARD,\n    variables: newBoard\n  }));\n\n  if (err) {\n    return null;\n  }\n\n  return data;\n};\n\nBoardService.getAllBoards = async () => {\n  const [err, data] = await to(gqlService.query({\n    query: BoardService.GET_ALL_BOARDS\n  }));\n\n  if (err) {\n    return [];\n  }\n\n  return data.data.boards;\n};\n\nBoardService.getBoardByAlias = async alias => {\n  const [err, data] = await to(gqlService.query({\n    query: BoardService.GET_BOARD_BY_ALIAS,\n    variables: {\n      alias\n    }\n  }));\n\n  if (err) {\n    return [];\n  }\n\n  return data.data.board;\n};\n\nBoardService.updateBoard = async (id, title) => {\n  const [err, data] = await to(gqlService.mutate({\n    mutation: BoardService.UPDATE_BOARD_TITLE,\n    variables: {\n      id,\n      title\n    }\n  }));\n\n  if (err) {\n    return null;\n  }\n\n  return data;\n};","map":{"version":3,"sources":["/Users/yiangosstroppos/Downloads/my-kanban-board-main 2/src/service/board-service.ts"],"names":["gql","gqlService","to","BoardService","GET_ALL_BOARDS","GET_BOARD_BY_ALIAS","ADD_BOARD","UPDATE_BOARD_TITLE","createBoard","newBoard","err","data","mutate","mutation","variables","getAllBoards","query","boards","getBoardByAlias","alias","board","updateBoard","id","title"],"mappings":"AAAA,SAASA,GAAT,QAAoB,qBAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAOC,EAAP,MAAe,aAAf;AAEA,eAAe,MAAMC,YAAN,CAAmB;AAAbA,Y,CACZC,c,GAAiBJ,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;AATqBG,Y,CAWZE,kB,GAAqBL,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;AAnBqBG,Y,CAqBZG,S,GAAYN,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;AA7BqBG,Y,CA+BZI,kB,GAAqBP,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;AAvCqBG,Y,CAyCZK,W,GAAc,MAAOC,QAAP,IAA2B;AAC9C,QAAM,CAACC,GAAD,EAAMC,IAAN,IAAc,MAAMT,EAAE,CAC1BD,UAAU,CAACW,MAAX,CAAkB;AAChBC,IAAAA,QAAQ,EAAEV,YAAY,CAACG,SADP;AAEhBQ,IAAAA,SAAS,EAAEL;AAFK,GAAlB,CAD0B,CAA5B;;AAMA,MAAIC,GAAJ,EAAS;AACP,WAAO,IAAP;AACD;;AACD,SAAOC,IAAP;AACD,C;;AApDkBR,Y,CAsDZY,Y,GAAe,YAAY;AAChC,QAAM,CAACL,GAAD,EAAMC,IAAN,IAAc,MAAMT,EAAE,CAC1BD,UAAU,CAACe,KAAX,CAAiB;AACfA,IAAAA,KAAK,EAAEb,YAAY,CAACC;AADL,GAAjB,CAD0B,CAA5B;;AAKA,MAAIM,GAAJ,EAAS;AACP,WAAO,EAAP;AACD;;AACD,SAAOC,IAAI,CAACA,IAAL,CAAUM,MAAjB;AACD,C;;AAhEkBd,Y,CAkEZe,e,GAAkB,MAAOC,KAAP,IAAyB;AAChD,QAAM,CAACT,GAAD,EAAMC,IAAN,IAAc,MAAMT,EAAE,CAC1BD,UAAU,CAACe,KAAX,CAAiB;AACfA,IAAAA,KAAK,EAAEb,YAAY,CAACE,kBADL;AAEfS,IAAAA,SAAS,EAAE;AAAEK,MAAAA;AAAF;AAFI,GAAjB,CAD0B,CAA5B;;AAMA,MAAIT,GAAJ,EAAS;AACP,WAAO,EAAP;AACD;;AACD,SAAOC,IAAI,CAACA,IAAL,CAAUS,KAAjB;AACD,C;;AA7EkBjB,Y,CA+EZkB,W,GAAc,OAAOC,EAAP,EAAmBC,KAAnB,KAAqC;AACxD,QAAM,CAACb,GAAD,EAAMC,IAAN,IAAc,MAAMT,EAAE,CAC1BD,UAAU,CAACW,MAAX,CAAkB;AAChBC,IAAAA,QAAQ,EAAEV,YAAY,CAACI,kBADP;AAEhBO,IAAAA,SAAS,EAAE;AAAEQ,MAAAA,EAAF;AAAMC,MAAAA;AAAN;AAFK,GAAlB,CAD0B,CAA5B;;AAMA,MAAIb,GAAJ,EAAS;AACP,WAAO,IAAP;AACD;;AACD,SAAOC,IAAP;AACD,C","sourcesContent":["import { gql } from '@apollo/client/core';\nimport gqlService from './gqlService';\nimport { Board } from '../models/Board';\nimport to from '../utils/to';\n\nexport default class BoardService {\n  static GET_ALL_BOARDS = gql`\n    query getAllBoards {\n      boards {\n        id\n        title\n        alias\n      }\n    }\n  `;\n\n  static GET_BOARD_BY_ALIAS = gql`\n    query getAllBoards($alias: String) {\n      board(alias: $alias) {\n        id\n        title\n        alias\n      }\n    }\n  `;\n\n  static ADD_BOARD = gql`\n    mutation createBoard($id: String, $title: String, $alias: String) {\n      createBoard(id: $id, title: $title, alias: $alias) {\n        id\n        title\n        alias\n      }\n    }\n  `;\n\n  static UPDATE_BOARD_TITLE = gql`\n    mutation updateBoard($id: String, $title: String) {\n      updateBoard(id: $id, data: { title: $title }) {\n        alias\n        id\n        title\n      }\n    }\n  `;\n\n  static createBoard = async (newBoard: Board) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: BoardService.ADD_BOARD,\n        variables: newBoard,\n      }),\n    );\n    if (err) {\n      return null;\n    }\n    return data;\n  };\n\n  static getAllBoards = async () => {\n    const [err, data] = await to(\n      gqlService.query({\n        query: BoardService.GET_ALL_BOARDS,\n      }),\n    );\n    if (err) {\n      return [];\n    }\n    return data.data.boards;\n  };\n\n  static getBoardByAlias = async (alias: string) => {\n    const [err, data] = await to(\n      gqlService.query({\n        query: BoardService.GET_BOARD_BY_ALIAS,\n        variables: { alias },\n      }),\n    );\n    if (err) {\n      return [];\n    }\n    return data.data.board;\n  };\n\n  static updateBoard = async (id: string, title: string) => {\n    const [err, data] = await to(\n      gqlService.mutate({\n        mutation: BoardService.UPDATE_BOARD_TITLE,\n        variables: { id, title },\n      }),\n    );\n    if (err) {\n      return null;\n    }\n    return data;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}